name:
  pkp-github-actions
inputs:
  application:
    required: false
  repository:
    required: false
  branch:
     required: false
  test:
    required: false.
  validate:
    required: false
  upgrade:
    required: false
  node_version:
    default: stable


runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        repository: 'pkp/pkp-github-actions'

    - name: Install postgres server
      if: ${{matrix.database == 'pgsql'}}
      run: |
        sudo apt install postgresql-14 postgresql-contrib
        sudo dpkg-reconfigure locales
        sudo sed -i -E 's\peer|scram-sha-256\trust\g' /etc/postgresql/14/main/pg_hba.conf
      shell: bash

    - name: Install mysql server
      if: ${{matrix.database == 'mysql'}}
      run: |
        sudo apt install -q -y mysql-server mysql-client
        sudo service mysql start
        sudo mysqladmin -u root -p'root' password ''
      shell: bash

    - name: Install mariadb server
      if: ${{matrix.database == 'mariadb'}}
      uses: ankane/setup-mariadb@v1
      with:
        mariadb-version: "10.11"

    - name: Install php environment
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{matrix.php-version}}
        extensions: bcmath, bz2, curl, gd, intl, mbstring, mysql,mysqlnd, mysqli, opcache, pdo_mysql, pgsql, json,soap, xml, zip
        coverage: xdebug
      env:
        update: true

    - name: Install PKP application for push
      if: ${{  github.event_name  == 'push' &&      (inputs.repository == '' && inputs.application == '' && inputs.branch == '')}}
      run: |
        git clone -b ${{ github.head_ref || github.ref_name }} https://github.com/${{ github.repository}} ~/${{ github.event.repository.name }} --depth 1
        echo ":bulb: Repository https://github.com/${{ github.repository}}  on branch: ${{ github.head_ref || github.ref_name }} " >> $GITHUB_STEP_SUMMARY
        echo ":bulb: Used-pkp-lib  ${{ github.event.repository.git_refs_url}} " >> $GITHUB_STEP_SUMMARY

      shell: bash

    - name: Install PKP application for pull_request
      if:  ${{github.event_name  == 'pull_request' &&    (inputs.repository == '' && inputs.application == '' && inputs.branch == '')}}
      run: |
        git clone -b ${{ github.event.pull_request.head.ref}} ${{ github.event.pull_request.head.repo.html_url}} ~/${{ github.event.pull_request.head.repo.name }} --depth 1
        echo ":bulb: Repository  ${{ github.event.pull_request.head.repo.html_url}} on branch: ${{ github.event.pull_request.head.ref}} " >> $GITHUB_STEP_SUMMARY
        echo ":bulb: Used-pkp-lib  ${{ github.event.pull_request.head.repo.git_refs_url}} " >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Install current application for  external plugins and pkp-lib for push and pull_request
      if:  ${{  inputs.repository != '' && inputs.application != '' && inputs.branch != ''}}
      run: |
        git clone -b ${{inputs.branch}} https://github.com/${{inputs.repository}}/${{inputs.application}} ~/${{inputs.application}} --depth 1
        echo ":bulb: Repository https://github.com/${{inputs.repository}}/${{inputs.application}}  on branch:${{inputs.branch}}" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Install  Submodules
      run: |
        cd ~/${{inputs.application || github.event.pull_request.head.repo.name || github.event.repository.name  }}
        git submodule update --init --recursive
        echo ":bulb: Install  Submodules"
      shell: bash

    - name : Checkout for  pkp-lib for Push
      if: ${{  github.event_name  == 'push' && github.event.repository.name =='pkp-lib'}}
      run:  |
        cd ~/${{inputs.application}}/lib/pkp
        git remote add ${{ github.event.repository.full_name}} https://github.com/${{ github.repository}}
        git fetch ${{ github.event.repository.full_name}} ${{github.ref_name}}
        git checkout ${{ github.event.repository.full_name}}/${{github.ref_name}}
        echo ":bulb: PKP-lib https://github.com/${{ github.repository}} ${{github.ref_name}}" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Checkout for  pkp-lib for Pull_request
      if: ${{  github.event_name  == 'pull_request' && github.event.repository.name =='pkp-lib'}}
      run: |
        cd ~/${{inputs.application}}/lib/pkp
        git remote add ${{ github.event.pull_request.head.repo.full_name}}   ${{ github.event.pull_request.head.repo.html_url}} 
        git fetch ${{ github.event.pull_request.head.repo.full_name}}  ${{ github.event.pull_request.head.ref}}
        git checkout ${{ github.event.pull_request.head.repo.full_name}}/${{ github.event.pull_request.head.ref}}
        echo ":bulb: PKP-lib  ${{ github.event.pull_request.head.repo.html_url}} on branch: ${{ github.event.pull_request.head.ref}} " >> $GITHUB_STEP_SUMMARY
      shell: bash


    - name: Install  dependencies
      run: |
        cd ~/${{inputs.application || github.event.repository.name }}
        ${{ github.workspace }}/.github/actions/install-dependencies.sh
      env:
        NODE_VERSION: ${{inputs.node_version}}
      shell: bash

    - name: Create additional directories
      run: mkdir -p ~/bin
      shell: bash

    - name: Install validation tools
      if: ${{ inputs.validate == 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }}
        ${{ github.workspace }}/.github/actions/install-validation-tools.sh
      shell: bash

    - name: Run XML validation
      if: ${{ inputs.validate == 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }}
         ${{ github.workspace }}/.github/actions/validate-xml.sh
      shell: bash

    - name: Run Javascript/JSON validation
      if: ${{ inputs.validate == 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }} 
         ${{ github.workspace }}/.github/actions/buildjs.sh -n
         ${{ github.workspace }}/.github/actions/validate-json.sh
      shell: bash

    - name: Run linting
      if: ${{ inputs.validate == 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }}
        npm run lint
      shell: bash

    - name: Run Documentation validation
      if: ${{ inputs.validate == 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }}
        ${{ github.workspace }}/.github/actions/run-document-validation.sh
      shell: bash

    - name:  Run  HTTP Server
      if: ${{ inputs.test == 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }} 
         ${{ github.workspace }}/.github/actions/run-http-server.sh
      shell: bash

    - name: Prepare test environment
      run: |
        cd ~/${{inputs.application || github.event.repository.name }} 
         ${{ github.workspace }}/.github/actions/prepare-tests.sh
      shell: bash
      env:
        TEST: ${{matrix.database}}
        DBTYPE: ${{matrix.database == 'pgsql' && 'PostgreSQL' || 'MySQLi'}}
        APPLICATION: ${{inputs.application || github.event.repository.name}}

    - name: Run  integration tests
      if: ${{ inputs.test == 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }} 
        ${{ github.workspace }}/.github/actions/run-integration-tests.sh
        echo ":rocket: run integration tests" >> $GITHUB_STEP_SUMMARY
      shell: bash
      env:
        BASEURL: http://localhost
        CYPRESS_BASE_URL: http://127.0.0.1:8000
        CYPRESS_DBTYPE: ${{matrix.database=='pgsql' && 'PostgreSQL' || 'MySQLi'}}
        CYPRESS_DBNAME: ${{inputs.application|| github.event.repository.name}}-ci
        CYPRESS_DBUSERNAME: ${{inputs.application|| github.event.repository.name}}-ci
        CYPRESS_DBPASSWORD: ${{inputs.application|| github.event.repository.name}}-ci
        CYPRESS_DBHOST: 127.0.0.1
        CYPRESS_FILESDIR: files
        APPLICATION: ${{inputs.application || github.event.repository.name}}


    - name: Run unit tests
      if: ${{ inputs.test == 'true' }}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }} 
        ${{ github.workspace }}//.github/actions/dump-database.sh
        ${{ github.workspace }}//.github/actions/runAllTests.sh -CcPpdR
        echo ":rocket: Run unit tests" >> $GITHUB_STEP_SUMMARY
      shell: bash
      env:
        TEST: ${{matrix.database}}
        DBTYPE: ${{matrix.database == 'pgsql' && 'PostgreSQL' || 'MySQLi'}}
        DATABASEDUMP: database.sql.gz
        FILESDUMP: files.tar.gz
        DBHOST: 127.0.0.1
        DBNAME: ${{inputs.application || github.event.repository.name}}-ci
        DBUSERNAME: ${{inputs.application || github.event.repository.name}}-ci
        DBPASSWORD: ${{inputs.application || github.event.repository.name}}-ci
        APPLICATION: ${{inputs.application || github.event.repository.name}}


    - name: Download datasets
      if: ${{  github.event_name  == 'pull_request' &&  inputs.upgrade == 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }} 
        git clone https://github.com/pkp/datasets --depth 1
      shell: bash

    - name: Run upgrade tests
      if: ${{  github.event_name  == 'pull_request' && inputs.upgrade == 'true' && (matrix.database == 'pgsql' || matrix.database == 'mysql' )}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }} 
        DATASET_BRANCHES=("stable-3_2_0" "stable-3_2_1"  "stable-3_3_0"  "stable-3_4_0" )
        for DATASET_BRANCH in "${DATASET_BRANCHES[@]}"
        do
          source ${{ github.workspace }}/.github/actions/prepare-tests.sh
          ${{ github.workspace }}/.github/actions/upgrade-pkp-application.sh
          echo ":rocket: Successfully upgraded  from ${DATASET_BRANCH} " >> $GITHUB_STEP_SUMMARY
        done
      env:
        TEST: ${{matrix.database}}
        DBTYPE: ${{matrix.database == 'pgsql' && 'PostgreSQL' || 'MySQLi'}}
        APPLICATION: ${{inputs.application || github.event.repository.name}}
        DATASET_BRANCH: ${DATASET_BRANCH}
      shell: bash

    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: Create Cypess screenshots as artifacts
        path: ~/${{ inputs.application || github.event.repository.name }}/cypress/screenshots
        if-no-files-found: ignore



